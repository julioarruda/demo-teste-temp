# crie um pipeline no GitHub Actions para fazer o build de uma aplicação .Net 6
name: Pipeline

on:
  workflow_dispatch:
    
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3

        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: 6.x
        
        - name: Install dependencies
          run: dotnet restore
        
        - name: Build
          run: dotnet build --no-restore
        
        - name: Test
          run: dotnet test --no-restore --verbosity normal
        
        - name: Publish
          run: dotnet publish --no-restore --output ./publish

# faça um upload da pasta ./publish
        - name: Upload Artifact
          uses: actions/upload-artifact@v2
          with:
            name: app
            path: ./publish

# inclua um upload para a pasta ./terraform
        - name: Upload Terraform
          uses: actions/upload-artifact@v2
          with:
            name: terraform
            path: ./terraform


# crie um Job que faça o Deploy do terraform no Azure
# precisa baixar o artefato chamado terraform

    deploy:
        runs-on: ubuntu-latest
        environment:
          name: dev
        needs: build
        steps:
        - name: Download Terraform
          uses: actions/download-artifact@v2
          with:
            name: terraform
            path: ./terraform

        - name: Replace variables
          run: |
            sed -i 's/__state_rg__/${{ vars.STATE_RG }}/g' ./terraform/provider.tf
            sed -i 's/__state_stg_account__/${{ vars.STATE_STG_ACCOUNT }}/g' ./terraform/provider.tf
            sed -i 's/__state_container_name__/${{ vars.STATE_CONTAINER_NAME }}/g' ./terraform/provider.tf
            sed -i 's/__state_container_name__/${{ vars.STATE_CONTAINER_NAME }}/g' ./terraform/provider.tf
            sed -i 's/__state_client_id__/${{ secrets.AZURE_CLIENT_ID }}/g' ./terraform/provider.tf
            sed -i 's/__state_client_secret__/${{ secrets.AZURE_CLIENT_SECRET }}/g' ./terraform/provider.tf
            sed -i 's/__state_tenant_id__/${{ secrets.AZURE_TENNANT_ID }}/g' ./terraform/provider.tf
            sed -i 's/__state_subscription_id__/${{ secrets.AZURE_SUBSCRIPTION_ID }}/g' ./terraform/provider.tf
            sed -i 's/__rg_name__/${{ vars.APP_RG_NAME }}/g' ./terraform/variables.tf
            sed -i 's/__location__/${{ vars.APP_LOCATION }}/g' ./terraform/variables.tf
            sed -i 's/__app-service__/${{ vars.APP_NAME }}/g' ./terraform/variables.tf

         

# inclua o login no Azure
        - name: Azure Login
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}


        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2

        - name: Terraform Init
          run: terraform init
          working-directory: ./terraform

        - name: Terraform Plan
          run: terraform plan -out plan.tfplan
          working-directory: ./terraform

        - name: Terraform Apply
          run: terraform apply plan.tfplan
          working-directory: ./terraform


# baixe o artefato app
        - name: Download Artifact
          uses: actions/download-artifact@v2
          with:
            name: app
            path: ./app

# faça o deploy da pasta ./app no azure app service
        - name: Azure WebApp Deploy
          uses: azure/webapps-deploy@v2
          with:
            app-name: example-${{ vars.APP_NAME }}
            package: ./app


